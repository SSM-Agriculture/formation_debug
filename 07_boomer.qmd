# Le package boomer {.backgroundTitre}

## Le package boomer 

Le package {boomer} fournit des outils de débogage qui permettent d'inspecter les résultats intermédiaires d'un code R.  
L'output produit par le package se présente sous la forme de bombes 💣 d'où le nom.  

Ses 2 principales fonctions sont :  
- `boom()`qui permet de diagnostiquer rapidement la performance d'un bloc de code R.  
- `rig`()`qui permet de tracer une fonction R et affiche automatiquement les mesures de performances à chacun de ses appels.  


## La fonction boom() (1/7)

3 écritures sont possibles :  

- Ecriture en une ligne
```{.r}

boom(iris |> head(2) |> filter(Sepal.Length > 5))
```
<br>

- Ecriture avec des crochets
```{.r}
boom({
  iris |> 
    head(2) |> 
    filter(Sepal.Length > 5)
})
```
<br>

- Ecriture à la fin de la chaîne de traitement
```{.r}
iris |> 
  head(2) |> 
  filter(Sepal.Length > 5) |> 
  boom()
```

## La fonction boom() (2/7)

Le résultat dans la console :  

```{.r}
💣 filter(head(iris, 2), Sepal.Length > 5) 
· 💣 💥 head(iris, 2) 
·   Sepal.Length Sepal.Width Petal.Length Petal.Width Species
· 1          5.1         3.5          1.4         0.2  setosa
· 2          4.9         3.0          1.4         0.2  setosa
· 
· 💣 💥 Sepal.Length > 5 
· [1]  TRUE FALSE
· 
💥 filter(head(iris, 2), Sepal.Length > 5) 
  Sepal.Length Sepal.Width Petal.Length Petal.Width Species
1          5.1         3.5          1.4         0.2  setosa

  Sepal.Length Sepal.Width Petal.Length Petal.Width Species
1          5.1         3.5          1.4         0.2  setosa
```

## La fonction boom() (3/7)

En cas d'erreur dans la chaîne de traitements R, la fonction `boom()` affiche les résultats intermédiaires jusqu'à l'apparition du bug.  

Ce code...  

```{.r}
iris |> 
  head(2) |> 
  filter(Species == "virginica") |> 
  boom()
```

renvoie la sortie suivante :  

```{.r}
💣 filter(head(iris, 2), Species == "virginica") 
· 💣 💥 head(iris, 2) 
·   Sepal.Length Sepal.Width Petal.Length Petal.Width Species
· 1          5.1         3.5          1.4         0.2  setosa
· 2          4.9         3.0          1.4         0.2  setosa
· 
· 💣 💥 Species == "virginica" 
· [1] FALSE FALSE
· 
💥 filter(head(iris, 2), Species == "virginica") 
[1] Sepal.Length Sepal.Width  Petal.Length Petal.Width  Species     
<0 lignes> (ou 'row.names' de longueur nulle)

[1] Sepal.Length Sepal.Width  Petal.Length Petal.Width  Species     
<0 lignes> (ou 'row.names' de longueur nulle)
```

## La fonction boom() (4/7)

La fonction `boom()` comprend 2 arguments très utiles :  
- `clock` : booléen qui permet de quantifier le temps d'exécution de chaque étape.  
- `print` : qui permet de fixer la manière dont sont affichés les résultats intermédiaires.  
    - Soit `str`  
    - Soit `glimpse`  
    - Soit `list(data.frame = str)`  

## La fonction boom() (5/7)

Un exemple d'utilisation de `boom()` avec l'argument `clock = TRUE`

```{.r}
iris |> 
  head(2) |> 
  filter(Sepal.Length > 5) |> 
  boom(clock = TRUE)
```

Renvoie :  

```{.r}
💣 filter 
· 💣 💥 head(iris, 2) 
time: 0.215 ms
·   Sepal.Length Sepal.Width Petal.Length Petal.Width Species
· 1          5.1         3.5          1.4         0.2  setosa
· 2          4.9         3.0          1.4         0.2  setosa
· 
· 💣 💥 Sepal.Length > 5 
time: 0.027 ms
· [1]  TRUE FALSE
· 
```
```{.r}
💥 filter(head(iris, 2), Sepal.Length > 5) 
time: 0.001 s
  Sepal.Length Sepal.Width Petal.Length Petal.Width Species
1          5.1         3.5          1.4         0.2  setosa

  Sepal.Length Sepal.Width Petal.Length Petal.Width Species
1          5.1         3.5          1.4         0.2  setosa
> 
```

## La fonction boom() (6/7)

Un exemple d'utilisation de `boom()` avec l'argument `print = list(data.frame = str)`

```{.r}
iris |> 
  head(2) |> 
  filter(Sepal.Length > 5) |> 
  boom(clock = TRUE, print = list(data.frame = str))
```

Renvoie :  

```{.r}
💣 filter 
· 💣 💥 head(iris, 2) 
time: 0.214 ms
· 'data.frame':	2 obs. of  5 variables:
·  $ Sepal.Length: num  5.1 4.9
·  $ Sepal.Width : num  3.5 3
·  $ Petal.Length: num  1.4 1.4
·  $ Petal.Width : num  0.2 0.2
·  $ Species     : Factor w/ 3 levels "setosa","versicolor",..: 1 1
· 
· 💣 💥 Sepal.Length > 5 
time: 0.021 ms
· [1]  TRUE FALSE
· 
```
```{.r}
💥 filter(head(iris, 2), Sepal.Length > 5) 
time: 0.002 s
'data.frame':	1 obs. of  5 variables:
 $ Sepal.Length: num 5.1
 $ Sepal.Width : num 3.5
 $ Petal.Length: num 1.4
 $ Petal.Width : num 0.2
 $ Species     : Factor w/ 3 levels "setosa","versicolor",..: 1

  Sepal.Length Sepal.Width Petal.Length Petal.Width Species
1          5.1         3.5          1.4         0.2  setosa
```

## La fonction boom() (7/7)

Quelques options utiles :  

- Pour fixer l'option clock à TRUE tout le temps : `options(boomer.clock = TRUE)`   
- Pour fixer l'option clock à TRUE tout le temps : `options(boomer.print = str)`   

Pour aller plus loin :

- {boomer} contient les fonctions `boom_on()` et `boom_off()` qui peuvent être utilisées dans le mode debug pas à pas de RStudio (voir [cette page](https://moodymudskipper.github.io/boomer/#boom_on-and-boom_off)).  

- Le package contient également une fonctionnalité `boom_shinyApp()`(encore expérimentale) pour aider les développeurs à debugger les applications shiny (voir [cette page](https://moodymudskipper.github.io/boomer/articles/shiny.html)).  


## La fonction rig() (1/N)

La fonction `rig()` 

Soit la fonction suivante :  

```{.r}
mafonction <- function(x) {
  y <- x^2
  return(y)
}
```

## La fonction rig() (2/N)

On appelle la fonction avec `rig()` :  

```{.r}
rig(mafonction)(2)
```
  
Et on obtient :

```{.r}
👇 mafonction
x :
[1] 2
💣 💥 x^2 
[1] 4

👆 mafonction
[1] 4
```

## La fonction rig() (3/N)

Avec une erreur :  

```{.r}
rig(mafonction)("2")
```

Renvoie :  

```{.r}
👇 mafonction
x :
[1] "2"
💣 💥 x^2 
Error: simpleError/error/condition
Erreur dans .Primitive("^")(x, 2) : 
  argument non numérique pour un opérateur binaire
👆 mafonction
```


## La fonction rig() (4/N)

Quelques informations complémentaires :  

- Pour arrêter de surveiller une fonction, il existe la fonction `unrig()`.  
- Si vous travaillez sur des fonctions à inclure dans un package, la fonction `rig_in_namespace()` est très utile.  

## La fonction rig() (3/N)

## Avantages/Inconvénients de {boomer}

{{< fa thumbs-up >}} **Avantages de {boomer} :**  
- Permet de "décortiquer" facilement les blocs de code (avec `boom()`)  
- Permet de "décortiquer" facilement les fonctions (avec `rig()`)  
- Peut aider à debugger les applications Shiny  

<br>

{{< fa thumbs-down >}} **Inconvénients de {boomer} :**  
- Pour le debogage d'une longue chaine de traitements, le pas à pas est plus pratique.  
- Surcharge le code source  
- On oublie souvent de les retirer du code une fois les bugs résolus.  
