# Les logs {.backgroundTitre}

## Les logs

Pour compléter les différents outils de débogage, il reste un pratique essentielle à présenter qui est **l'écriture des logs**.  
Les logs permettent de tracer l'historique des actions, de suivre le cheminement logique du code R et ainsi de repérer l'origine des bugs/erreurs.  

Cette pratique est tellement répandue et utile qu'il existe de très nombreux packages R : 
[{logger}](https://cran.r-project.org/web/packages/logger/index.html), [{futile.logger}](https://cran.r-project.org/web/packages/futile.logger/index.html), [{logging}](https://cran.r-project.org/web/packages/logging/index.html), [{lgr}](https://cran.r-project.org/web/packages/lgr/index.html), [{loggit}](https://cran.r-project.org/web/packages/loggit/index.html),
[{log4r}](https://cran.r-project.org/web/packages/log4r/index.html) ...  
  

Dans cette présentation, nous allons utiliser le package [{logr}](https://logr.r-sassy.org/index.html).

## Pourquoi logr ?

Le package {logr} présente plusieurs avantages :  
  
- Il est très simple à utiliser  
- Il fournit automatique un en-tête complet très utile au débogage  
- L'horadatage est automatique (utile pour des mesures de performances)  

## logr (1/N)

Avec {logr}, il y a besoin de seulement 3 étapes pour créer un fichier de log :
  
- Ouvrir le fichier de log (avec `log_open()`)  
    - Syntaxe : `log_open(chemin_vers_fichier_log)`  
  
- Ecrire dans le fichier de log (avec `log_print()`)  
    - Syntaxe : `log_print("message à écrire dans la log")`  
  
- Fermer le fichier de log (avec `log_close()`)  
    - Syntaxe : `log_close()`  

## logr (2/N)

**Structure d'une log :**  
  
- **Un en-tête** qui contient des informations essentielles : le chemin du fichier de log, le répertoire de travail, la version de R Core, le nom de l'utilisateur, le time-stanp d'exécution, les packages utilisés... 
  
- **Un corps/body** qui constitue le coeur de la log. Il contient tous les messages et les objets que vous voulez afficher tels qu'il s'afficherait dans la console de R.  
  
- **Un pied de page** qui contient le timestamp de fin d'exécution ainsi que le temps total écoulé pendant l'exécution du script R.


## logr (3/N)

Un exemple :  

```{.r}
library(logr)

# Ouverture de la log
log_open("ma_log.log")

log_print("## Lecture des données")
donnees <- readRDS("data/iris.rds")

log_print("## Traitement des données")
resultat <- donnees |> 
  group_by(Species) |> 
  summarise(moy_long_petales = mean(Petal.Length, na.rm = TRUE)) 

# Fermeture de la log
log_close()
```

## logr (4/N)

Renvoie la log suivante (partie 1) :  

```{.sh}
========================================================================= 
Log Path: ./log/ma_log.log 
Working Directory: /var/data/nfs/CERISE/00-Espace-Personnel/damien.dotta 
User Name: damien.dotta 
R Version: 4.4.1 (2024-06-14) 
Machine: stats-prod-rstudio-2.zsg.cdpagri.fr x86_64 
Operating System: Linux 4.18.0-372.32.1.el8_6.x86_64 #1 SMP Fri Oct 7 12:35:10 EDT 2022 
Base Packages: stats graphics grDevices utils datasets methods base 
Other Packages: dplyr_1.1.4 logr_1.3.8 common_1.1.3 
Log Start Time: 2025-06-27 14:18:06.072628 
========================================================================= 
```

## logr (5/N)

Partie 2 :
```{.sh}
## Lecture des données 

NOTE: Log Print Time:  2025-06-27 14:18:06.08348 
NOTE: Elapsed Time: 0.00261092185974121 secs 

## Traitement des données 

NOTE: Log Print Time:  2025-06-27 14:18:06.090004 
NOTE: Elapsed Time: 0.00652408599853516 secs 

========================================================================= 
Log End Time: 2025-06-27 14:18:06.120677 
Log Elapsed Time: 0 00:00:00 
========================================================================= 
```


## logr (6/N)

La fonction `log_print()` a également un alias utile pour la présentation des logs :  
  
- `sep()` ajoute du texte dans la log comme `log_print()` mais ajoute des séparateurs avant/après le message.  
Cet exemple :  
```{.r}
sep("Création des graphiques")
```
Va générer dans la log :
```{.sh}
========================================================================= 
Création des graphiques 
========================================================================= 
```

- `put()` est également un alias plus court que le nom `log_print()` dont le comportement est identique.

## logr (7/N)

La fonction `log_print()` (ou `put()`) permet également d'envoyer des résultats dans les logs.  
  
Par exemple :  

```{.r}
log_print("## Traitement des données")
resultat <- donnees |> 
  group_by(Species) |> 
  summarise(moy_long_petales = mean(Petal.Length, na.rm = TRUE)) %>% 
  log_print()
```

## logr (8/N)

Renvoie :  

```{.sh}
## Traitement des données 

NOTE: Log Print Time:  2025-06-27 14:35:15.474827 
NOTE: Elapsed Time: 0.0325253009796143 secs 

# A tibble: 3 × 2
  Species    moy_long_petales
  <fct>                 <dbl>
1 setosa                 1.46
2 versicolor             4.26
3 virginica              5.55

NOTE: Data frame has 3 rows and 2 columns. 

NOTE: Log Print Time:  2025-06-27 14:35:15.572858 
NOTE: Elapsed Time: 0.0980312824249268 secs 
```


## logr (9/N)

**En cas d'erreur/bug (ou de warnings) pendant l'exécution du programme R**, ceux-ci s'afficheront dans la log à l'endroit où ils ont eu lieu.  

En complément, {logr} va isoler les messages d'erreurs et les warnings dans un fichier qui porte l'extension `.msg`.  

![](img/logs_error_msg.png){fig-align="center"} 

## logr (10/N)

Le traceback de R peut être très verbeux en cas d'erreurs. Si vous n'avez pas besoin de ce niveau de précision, il est possible de le désactivement ponctuellement avec `log_print("traceback" = FALSE)` ou globalement avec `options("logr.traceback" = FALSE)`.

Exemple d'erreur dans les logs :  
```{.sh}
Error in group_by(donnees, species) : [38;5;255m [31m✖[38;5;255m Column `species` is not found.[39m 
Traceback: 
 [1] "10: stop(fallback)"                                                             
 [2] "9: signal_abort(cnd, .file)"                                                    
 [3] "8: abort(bullets, call = error_call)"                                           
 [4] "7: group_by_prepare(.data, ..., .add = .add, error_call = current_env())"       
 [5] "6: group_by.data.frame(donnees, species)"                                       
 [6] "5: group_by(donnees, species)"                                                  
 [7] "4: summarise(group_by(donnees, species), moy_long_petales = mean(Petal.Length, "
 [8] "       na.rm = TRUE))"                                                          
...                                                            
```
Sans traceback :  
```{.sh}
Error in group_by(donnees, species) : [38;5;255m [31m✖[38;5;255m Column `species` is not found.[39m 
```


## logr (11/N)

Quelques conseils si vous savez que vous allez utiliser logr sur votre programme :  

- Remplacer vos commentaires dans votre code R par des `log_print()`  

A la place de :  
```{.r}
# Traitement des données
```

Mettre ça :  
```{.r}
log_print("# Traitement des données")
```

- A chaque exécution de vos programmes R, les logs seront par défaut écrasées. Si vous souhaitez les conserver, il est possible d'horodater leurs noms avec par exemple : 
```{.r}
nom <- paste0("mylog_", format(Sys.Date(), "%Y-%m-%d"))

# Open log
lf <- log_open(nom)
```


## logr (12/N)

Il est possible de **logguer seulement une partie d'un script R**. Pour cela, il existe les options `options("logr.on" = FALSE)` et `options("logr.on" = TRUE)`.  

```{.r code-line-numbers="4-5,14-15"}
# Un 1er traitement
iris |> names()

# Activation de logr
options("logr.on" = TRUE)

log_open("ma_log.log")

log_print("## Lecture des données")
donnees <- readRDS("data/iris.rds")

log_close()

# Désactivation de logr
options("logr.on" = FALSE)

# La suite du programme
donnees |> ...
```

## logr (13/N)

- Si vous souhaitez raccourcir la longueur de vos logs, il est possible de supprimer les lignes blanches avec l'option `options("logr.compact" = TRUE)`.  

- Si vous souhaitez ne pas écrire les notes dans vos logs, il existe l'option `options("logr.notes" = FALSE)`  

- Si vous souhaitez envoyer vos variables d'environnement dans vos logs, c'est possible via `put(Sys.getenv())` 
  
- Pour plus de conseils, consultez [la FAQ du package](https://logr.r-sassy.org/articles/logr-faq.html) qui est très riche.

## logr (14/N)

Si votre code est essentiellement écrit avec {dplyr} et {tidyr}, il est possible de limiter le nombre d'appels à `log_print()` en utilisant `options("logr.autolog" = TRUE)`.  
Cela permet d'écrire dans les logs automatiquement (grâce à [tidylog](https://github.com/elbersb/tidylog/)) à chaque appel d'un bloc de code.  

Exemple sans `log_print()` :  
```{.r}
options("logr.autolog" = TRUE)

log_open("ma_log.log")

donnees <- readRDS("data/iris.rds")

resultat <- donnees |> 
  group_by(Species) |> 
  summarise(moy_long_petales = mean(Petal.Length, na.rm = TRUE)) 

# Fermeture de la log
log_close()
```

## logr (15/N)

Renvoie la log suivante :  
```{.sh}
En-tête...
=========================================================================

group_by: one grouping variable (Species)

NOTE: Log Print Time:  2025-06-27 15:27:52.030858
NOTE: Elapsed Time: 0.0213210582733154 secs

summarise: now 3 rows and 2 columns, ungrouped

NOTE: Log Print Time:  2025-06-27 15:27:52.346752
NOTE: Elapsed Time: 0.315893888473511 secs

=========================================================================
Pied de page..
```

