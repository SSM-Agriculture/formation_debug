# Les logs {.backgroundTitre}

## Les logs

Pour compléter les différents outils de débogage, il reste un pratique essentielle à présenter qui est **l'écriture des logs**.  
Les logs permettent de tracer l'historique des actions, de suivre le cheminement logique du code R et ainsi de repérer l'origine des bugs/erreurs.  

Cette pratique est tellement répandue et utile qu'il existe de très nombreux packages R : 
[{logger}](https://cran.r-project.org/web/packages/logger/index.html), [{futile.logger}](https://cran.r-project.org/web/packages/futile.logger/index.html), [{logging}](https://cran.r-project.org/web/packages/logging/index.html), [{lgr}](https://cran.r-project.org/web/packages/lgr/index.html), [{loggit}](https://cran.r-project.org/web/packages/loggit/index.html),
[{log4r}](https://cran.r-project.org/web/packages/log4r/index.html) ...  
  

Dans cette présentation, nous allons utiliser le package [{logr}](https://logr.r-sassy.org/index.html).

## Pourquoi logr ?

Le package {logr} présente plusieurs avantages :  
  
- Il est très simple à utiliser  
- Il fournit automatique un en-tête complet très utile au débogage  
- L'horadatage est automatique (utile pour des mesures de performances)  

## logr (1/N)

Avec {logr}, il y a besoin de seulement 3 étapes pour créer un fichier de log :
  
- Ouvrir le fichier de log (avec `log_open()`)  
    - Syntaxe : `log_open(chemin_vers_fichier_log)`  
  
- Ecrire dans le fichier de log (avec `log_print()`)  
    - Syntaxe : `log_print("message à écrire dans la log")`  
  
- Fermer le fichier de log (avec `log_close()`)  
    - Syntaxe : `log_close()`  

## logr (2/N)

Un exemple :  

```{.r}
library(logr)

# Ouverture de la log
log_open("ma_log.log")

log_print("## Lecture des données")
donnees <- readRDS("data/iris.rds")

log_print("## Traitement des données")
resultat <- donnees |> 
  group_by(Species) |> 
  summarise(moy_long_petales = mean(Petal.Length, na.rm = TRUE)) 

# Fermeture de la log
log_close()
```

## logr (3/N)

Renvoie la log suivante (partie 1) :  

```{.sh}
========================================================================= 
Log Path: ./log/ma_log.log 
Working Directory: /var/data/nfs/CERISE/00-Espace-Personnel/damien.dotta 
User Name: damien.dotta 
R Version: 4.4.1 (2024-06-14) 
Machine: stats-prod-rstudio-2.zsg.cdpagri.fr x86_64 
Operating System: Linux 4.18.0-372.32.1.el8_6.x86_64 #1 SMP Fri Oct 7 12:35:10 EDT 2022 
Base Packages: stats graphics grDevices utils datasets methods base 
Other Packages: dplyr_1.1.4 logr_1.3.8 common_1.1.3 
Log Start Time: 2025-06-27 14:18:06.072628 
========================================================================= 
```

```{.sh}
## Lecture des données 

NOTE: Log Print Time:  2025-06-27 14:18:06.08348 
NOTE: Elapsed Time: 0.00261092185974121 secs 

## Traitement des données 

NOTE: Log Print Time:  2025-06-27 14:18:06.090004 
NOTE: Elapsed Time: 0.00652408599853516 secs 

========================================================================= 
Log End Time: 2025-06-27 14:18:06.120677 
Log Elapsed Time: 0 00:00:00 
========================================================================= 
```


## logr (4/N)

La fonction `log_print()` a également un alias utile pour la présentation des logs :  
  
- `sep()` ajoute du texte dans la log comme `log_print()` mais ajoute des séparateurs avant/après le message.  
Cet exemple :  
```{.r}
sep("Création des graphiques")
```
Va générer dans la log :
```{.sh}
========================================================================= 
Création des graphiques 
========================================================================= 
```

- `put()` est également un alias plus court que le nom `log_print()` dont le comportement est identique.

## logr (5/N)

La fonction `log_print()` (ou `put()`) permet également d'envoyer des résultats dans les logs.  
  
Par exemple :  

```{.r}
log_print("## Traitement des données")
resultat <- donnees |> 
  group_by(Species) |> 
  summarise(moy_long_petales = mean(Petal.Length, na.rm = TRUE)) %>% 
  log_print()
```

## logr (6/N)

Renvoie :  

```{.sh}
## Traitement des données 

NOTE: Log Print Time:  2025-06-27 14:35:15.474827 
NOTE: Elapsed Time: 0.0325253009796143 secs 

# A tibble: 3 × 2
  Species    moy_long_petales
  <fct>                 <dbl>
1 setosa                 1.46
2 versicolor             4.26
3 virginica              5.55

NOTE: Data frame has 3 rows and 2 columns. 

NOTE: Log Print Time:  2025-06-27 14:35:15.572858 
NOTE: Elapsed Time: 0.0980312824249268 secs 
```


## logr (7/N)
## logr (8/N)

Quelques conseils si vous savez que vous allez utiliser logr sur votre programme :  

- Remplacer vos commentaires dans votre code R par des `log_print()`  

A la place de :
```{.r}
# Traitement des données
```

Mettre ça : 
```{.r}
log_print("# Traitement des données")
```


## logr (9/N)


## logr (10/N)

{{< fa thumbs-up >}} **Avantages du browser :**  


<br>

{{< fa thumbs-down >}} **Inconvénients du browser :**  
- Surcharge le code  




voir /var/data/nfs/CERISE/04-Espace-Echanges/Ordonnancement/requetes_bdni/BDNI_effectifs_bovins.R