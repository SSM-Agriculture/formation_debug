{"title":"Le package dbExplorer","markdown":{"yaml":{"title":"Le package dbExplorer","subtitle":"Un outil Shiny pour explorer les bases de données et les tables parquet","date":"today","date-format":"DD/MM/YYYY","author":"SSP/DEMESIS/BQIS/PAOS","description":"Présentation du package dbExplorer au GUR du 30 juin 2025\n","slide-tone":false,"chalkboard":false,"transition":"slide","fig-cap-location":"bottom","self-contained":true,"toc":true,"toc-title":"Sommaire","toc-depth":1,"toc-float":true,"execute":{"echo":false,"warning":false,"cache":false},"editor":{"render-on-save":true}},"headingText":"A quoi sert le package dbExplorer ?","containsRefs":false,"markdown":"\n\n\nUn package R qui lance une application Shiny qui a **plusieurs objectifs :**\n\n- Explorer rapidement les données présentes dans une base de données\n- Explorer rapidement le contenu des tables au format Parquet sur Cerise\n- Faire des manipulations de 1er niveau sur ces données\n\n=> Un package développé et maintenu par Adam Marsal du SSM Justice.\n\n  \n## Installation du package depuis Cerise\n\n\n```{.r}\n# install.packages(\"remotes\")\nremotes::install_git(\"https://gitlab.forge.agriculture.rie.gouv.fr/ssp/bmis/packages/dbexplorer\",\n                     dependencies = T,\n                     git = \"external\")\n```\n\nComme n'importe quel autre package R, `{dbExplorer}` doit être chargé avec :\n\n\n```{.r}\nlibrary(dbExplorer)\n```\n\nAvant d'explorer ce package, **2 concepts théoriques sont nécessaires**.\n\n## Les \"Background jobs\" de RStudio\n\nLes \"Background Jobs\" dans RStudio sont une fonctionnalité qui permet **d’exécuter des scripts R en arrière-plan** sans bloquer l’interface principale de RStudio. \n\n![](img/Background_jobs.png){fig-align=\"center\"} <br>\n**Quelques caractéristiques** :  \n\n- **Une exécution indépendante** : le job s'exécute dans un processus séparé de la session principale (non bloquant).  \n- **Suivi de l'exécution** : une fenêtre dédiée dans RStudio qui permet de consulter la progression, les messages et l'état du job (traçabilité).\n- **Une reproductibilité garantie** : les jobs relancent le script tel qu'il est au moment de l'appel dans un environnement propre. Le job s'exécute de manière isolé sans polluer l'environnement global.\n\n## Exemple de Background jobs (1/3)\n\nSoit le script simple suivant :  \n\n```{.r}\nlibrary(dplyr)\n\nSys.sleep(5)\ntab_agregee <- iris |> \n  summarise(Moy_pet_long = mean(Petal.Length, na.rm = TRUE), .by = Species)\nSys.sleep(5)\n\nprint(\"Pgm terminé\")\n```\n<br>\n\nCe script peut être lancé via un background job en cliquant sur le bouton `\"Start Background job\"`.    \n\n## Exemple de Background jobs (2/3)\n\nLa fenêtre suivante s'affiche :  \n\n![](img/fenetre_background_jobs.png){fig-align=\"center\"}\n\n\n## Exemple de Background jobs (3/3)\n\nEn fonction des choix effectués au lancement du background job, les résultats seront (ou pas) disponibles dans l'environnement global de la session R.  \n\n![](img/Env_background_jobs.png){fig-align=\"center\"}\n\nSi vous avez choisi de stocker les résultats dans un objet \"results\", voici comment y accéder :  \n\n![](img/get_env_background_jobs.png){fig-align=\"center\"}\n\n## Structure d'une base de données relationnelles\n\nLes bases de données relationnelles sont structurées **de manière hiérarchique et logique**.  \n\n- **La Base de donnée (BDD)** : c'est l'entité principale qui contient l'ensemble des données\n- **Le schéma** : c'est une structure logique à l'intérieur d'une BDD. Il sert à organiser les objets. Il peut être vu comme un *dossier* dans la BDD\n- **Les tables** : ce sont les éléments centraux où les données sont stockées\n- **Les vues** : ce sont des représentations virtuelles de tables (créées au moment des requêtes)\n\nExemple de structure :  \n\n```\nBase de données : vente_en_ligne\n│\n├── Schéma : public\n│   ├── Table : clients\n│   ├── Table : commandes\n│   └── Table : produits\n│\n└── Schéma : archive\n    └── Table : commandes_2020\n```\n\n## Se connecter à une BDD sans dbExplorer (1/3)\n\nExemple avec BDD PostgreSQL :  \n\n```{.r}\nlibrary(connections)\nlibrary(RPostgres)\n\n### Chargement des infos de connection\ninfos_connection_prod <- read_delim(\"infos_connection.csv\", \n                                    delim = \";\", escape_double = FALSE, trim_ws = TRUE,\n                                    show_col_types = FALSE) %>% \n  filter(ENV == \"PROD\")\n\n### Connexion à la BDD\ncon <- connection_open(\n    Postgres(), \n    user = infos_connection_prod[[\"USER\"]],\n    password = rawToChar(openssl::base64_decode(infos_connection_prod[[\"PWD\"]])),\n    host = infos_connection_prod[[\"DB_URL\"]], \n    dbname = infos_connection_prod[[\"DATABASE\"]],\n    port = infos_connection_prod[[\"PORT\"]])\n```\n\n\n\n## Se connecter à une BDD sans dbExplorer (2/3)\n\n=> La structure de la BDD est visible dans l'onglet `\"Connections\"` de RStudio :  \n\n![](img/balsaV2.png){fig-align=\"center\"}\n\n## Se connecter à une BDD sans dbExplorer (3/3)\n\n![](img/balsaV2_onglet_connections.png){fig-align=\"center\"}\n<br>\n![](img/balsaV2_affichage_table.png){fig-align=\"center\"}\n\n\n## Explorer une base de données PostgreSQL (1/4)\n\n```{.r}\n## Installation du package \nremotes::install_git(\"https://gitlab.forge.agriculture.rie.gouv.fr/ssp/bmis/packages/dbexplorer\",\n                     dependencies = T,\n                     git = \"external\")\n```\n\n```{.r}\n## Création du fichier de connexion à postgre SQL \nconnector_file <- \"./R/dbExplorer-connector/dbExplorerPgConnector.R\"\ndbExplorer:::createPostgreSQLConnector(host = \"postgresql-164525.projet-sortie-sas\",\n                                       dbname = \"dvf\",\n                                       port = 5432,\n                                       file=connector_file)\n```\n\n<br>\n\n```{.r}\n## Lancement de l'application sur ce fichier de connexion. \nExplorerDonnees(connectorFile = connector_file)\n```\n\n<br>\n\n=> **Un \"background job\"** se lance dans RStudio et **une application shiny** s'ouvre dans le navigateur.\n\n## Explorer une base de données PostgreSQL (2/4)\n\nEntrer le login & mot de passe d'accès à la BDD :  \n\n![](img/identification_dbExplorer.png){fig-align=\"center\"}\n\n## Explorer une base de données PostgreSQL (3/4)\n\nOn peut aussi supprimer la fenêtre de login en modifiant le fichier `dbExplorerPgConnector.R`.   \n\n<br>\n\n![](img/no_login.png){fig-align=\"center\"}\n\n## Explorer une base de données PostgreSQL (4/4)\n\n![](img/image_explorateur_bdd.png){fig-align=\"center\"}\n\n## Démonstration \n\n<br>\n<br>\n<br>\n<br>\n\nDémo sur Cerise ! (voir rép. `dbExplorer_test`)\n\n## Quelques raccourcis/astuces utiles !\n\n- Maintenir la touche \"Ctrl\" enfoncée pour **sélectionner les colonnes interactivement**  \n- Pour filtrer les lignes, cocher la case \"Cliquer pour filtrer\" puis :  \n    - Cliquer une fois pour appliquer le filtre sur les lignes de la table\n    - Cliquer deux fois pour appliquer la négation du filtre sur les lignes de la table\n- **Pour télécharger les jeux de données** au format csv, cliquer en haut à droite sur le bouton **\"télécharger\"** ou faire **Ctrl + S**.\n- Appuyer sur le bouton \"+\" pour travailler sur différents onglets (pour différentes tables).\n\n## Création de fichiers parquet à partir d'une BDD (1/2)\n\n```{.r}\n### Connexion à la BDD\ncon <- connection_open(\n    Postgres(), \n    user = infos_connection_prod[[\"USER\"]],\n    password = rawToChar(openssl::base64_decode(infos_connection_prod[[\"PWD\"]])),\n    host = infos_connection_prod[[\"DB_URL\"]], \n    dbname = infos_connection_prod[[\"DATABASE\"]],\n    port = infos_connection_prod[[\"PORT\"]])\n```\n\nAppel de la fonction `exportPgToParquet.R` :  \n\n```{.r}\nsource(\"R/exportPgToParquet.R\")\n```\n\n## Création de fichiers parquet à partir d'une BDD (2/2)\n\n```{.r}\n# Export de la table categorie_juridique\nexportPgToParquet(con,\"categorie_juridique\")\n# Export de la table entite_surface\nexportPgToParquet(con,\"entite_surface\")\n```\n<br>\n\n![](img/export_parquet.png){fig-align=\"center\"}\n<br>\n![](img/export_parquet_explorateur.png){fig-align=\"center\"}\n\n## Explorer une base de données SQLite\n\n```{.r}\nlibrary(RSQLite)\nconnector_file <- \"R/dbExplorer-connector/connector_sqlite.R\"\ndbExplorer::ExplorerDonnees(connectorFile = \"R/dbExplorer-connector/connector_sqlite.R\")\n```\n<br>\n\n![](img/explorateur_sqlite.png){fig-align=\"center\"}\n\n## Explorer des fichiers parquets\n\n```{.r}\ndbExplorer::ExplorerDossiers(\"~/CERISE/03-Espace-de-Diffusion/030_Structures_exploitations/3020_Recensements/RA_2010/\")\n```\n\n![](img/explorateur_dossier.png){fig-align=\"center\"}\n\n## Quelques compléments sur les manipulations de BDD avec R (1/2)\n\nPrenons une base SQLite :\n\n- Connexion à la BDD\n```{.r}\nlibrary(RSQLite)\n\nchemin_IPPAP_dev <- \"~/CERISE/02-Espace-de-Production/090_Prix/9010_IPPAP/IPPAP_app/dev/App/donnees/IPPAP.sqlite\"\ndb_IPPAP <- dbConnect(RSQLite::SQLite(), dbname = chemin_IPPAP_dev)\n```\n\n<br>\n\nQuelques manipulations possibles avec des fonctions R :  \n\n- Pour afficher la liste des tables de la base de donnees\n\n```{.r}\ndbListTables(db_IPPAP)\n\n> [1] \"COEFF_RACCORDEMENT\"   \"DATES\"                \"NOMENCLATURE_BDC\"    \n[4] \"POND_MOIS_COMPOSANTS\" \"PRIX\"                 \"QUANTITES\"           \n[7] \"REFERENTIEL_IPPAP\"    \"VIVANTES\"  \n```\n\n## Quelques compléments sur les manipulations de BDD avec R (2/2)\n\n- Pour afficher les colonnes d'une table\n\n```{.r}\ndbListFields(db_IPPAP,\"PRIX\")\n> [1] \"CODE_S\"     \"2019-01-01\" \"2019-02-01\" \"2019-03-01\" \"2019-04-01\" \"2019-05-01\"\n  [7] \"2019-06-01\" \"2019-07-01\" \"2019-08-01\" \"2019-09-01\" \"2019-10-01\" \"2019-11-01\"\n [13] \"2019-12-01\" \"2020-01-01\" \"2020-02-01\" \"2020-03-01\" \"2020-04-01\" \"2020-05-01\"\n [19] \"2020-06-01\" \"2020-07-01\" \"2020-08-01\" \"2020-09-01\" \"2020-10-01\" \"2020-11-01\"\n ...\n```\n\n- Pour lire une table \n\n```{.r}\nverif_PRIX <- dbReadTable(db_IPPAP,\"PRIX\")\nhead(verif_PRIX)[,1:4]\n    CODE_S  2019.01.01  2019.02.01  2019.03.01  2019.04.01\n1 10100046       1.839       1.794       1.700       1.729\n2  1120057          NA          NA       0.606       0.516\n3  1140001          NA          NA          NA          NA\n4  1150001          NA          NA          NA          NA\n```\n\n\n## Utilisation basique du package {dm}\n\n\nInstallation et chargement :  \n\n```{.r}\ninstall.packages('dm')\nlibrary(dm)\n```\n\nCréation d'un objet dm :\n\n```{.r}\nfin_dm <- dm_from_src(db_IPPAP)\nfin_dm\n```\n\n```{.r}\n── Table source ───────────────────────────────────────────────────────────────────────────\nsrc:  sqlite 3.47.1 [/var/data/nfs/CERISE/02-Espace-de-Production/090_Prix/9010_IPPAP/IPPAP_app/dev/App/donnees/IPPAP.sqlite]\n── Metadata ───────────────────────────────────────────────────────────────────────────────\nTables: `COEFF_RACCORDEMENT`, `DATES`, `NOMENCLATURE_BDC`, `POND_MOIS_COMPOSANTS`, `PRIX`, … (8 total)\nColumns: 511\nPrimary keys: 0\nForeign keys: 0\n```\n\n## Aperçu de quelques fonctions de {dm} (1/2)\n\n- Pour afficher la liste des tables de la base de donnees\n\n```{.r}\nnames(fin_dm)\n\n> [1] \"COEFF_RACCORDEMENT\"   \"DATES\"                \"NOMENCLATURE_BDC\"    \n[4] \"POND_MOIS_COMPOSANTS\" \"PRIX\"                 \"QUANTITES\"           \n[7] \"REFERENTIEL_IPPAP\"    \"VIVANTES\"  \n```\n- Pour lire une table\n\n```{.r}\nfin_dm$PRIX\n# Source:   table<`PRIX`> [?? x 121]\n# Database: sqlite 3.47.1 [/var/data/nfs/CERISE/02-Espace-de-Production/090_Prix/9010_IPPAP/IPPAP_app/dev/App/donnees/IPPAP.sqlite]\n   CODE_S   `2019-01-01` `2019-02-01` `2019-03-01` `2019-04-01` `2019-05-01` `2019-06-01` `2019-07-01` `2019-08-01`\n   <chr>           <dbl>        <dbl>        <dbl>        <dbl>        <dbl>        <dbl>        <dbl>        <dbl>\n 1 10100046        1.84         1.79         1.7          1.73         1.75        NA           NA           NA    \n 2 1120057        NA           NA            0.606        0.516        0.504        0.531        0.75         0.657\n 3 1140001        NA           NA           NA           NA            0.162        0.295        0.208        0.203\n```\n\n\n## Aperçu de quelques fonctions de {dm} (2/2)\n\n- Pour afficher les colonnes d'une table\n```{.r}\ncolnames(fin_dm$PRIX)\n> [1] \"CODE_S\"     \"2019-01-01\" \"2019-02-01\" \"2019-03-01\" \"2019-04-01\" \"2019-05-01\"\n  [7] \"2019-06-01\" \"2019-07-01\" \"2019-08-01\" \"2019-09-01\" \"2019-10-01\" \"2019-11-01\"\n [13] \"2019-12-01\" \"2020-01-01\" \"2020-02-01\" \"2020-03-01\" \"2020-04-01\" \"2020-05-01\"\n [19] \"2020-06-01\" \"2020-07-01\" \"2020-08-01\" \"2020-09-01\" \"2020-10-01\" \"2020-11-01\"\n ...\n```\n\n- Pour faire des comptages sur une table\n```{.r}\ndplyr::count(fin_dm$REFERENTIEL_IPPAP,LIB_PRODUIT)\n# Source:   SQL [?? x 2]\n# Database: sqlite 3.47.1 [/var/data/nfs/CERISE/02-Espace-de-Production/090_Prix/9010_IPPAP/IPPAP_app/dev/App/donnees/IPPAP.sqlite]\n   LIB_PRODUIT             n\n   <chr>               <int>\n 1 Abricot                12\n 2 Ail                     1\n 3 Artichaut               7\n# ℹ more rows\n# ℹ Use `print(n = ...)` to see more rows\n```\n\n## Visualiser les relations entre les tables avec {dm}\n\nExemple issu de la documentation avec `dm_draw()`...  \n\n```{.r}\ndm %>%\n  dm_draw()\n```\n\n... qui permet de visualiser les relations entre les tables :  \n\n![](img/Visualisation_data_model.png){fig-align=\"center\"}\n\n\nLe package {dm} est très riche ! D'autres fonctionnalités pourront être abordés lors d'un futur GUR !  \n\n\n## Pour en savoir plus\n\n- [Package dm](https://dm.cynkra.com/)\n- [Fiche utilitr](https://book.utilitr.org/03_Fiches_thematiques/Fiche_connexion_bdd.html) sur l'utilisation des bases de données avec R.","srcMarkdownNoYaml":"\n\n## A quoi sert le package dbExplorer ?\n\nUn package R qui lance une application Shiny qui a **plusieurs objectifs :**\n\n- Explorer rapidement les données présentes dans une base de données\n- Explorer rapidement le contenu des tables au format Parquet sur Cerise\n- Faire des manipulations de 1er niveau sur ces données\n\n=> Un package développé et maintenu par Adam Marsal du SSM Justice.\n\n  \n## Installation du package depuis Cerise\n\n\n```{.r}\n# install.packages(\"remotes\")\nremotes::install_git(\"https://gitlab.forge.agriculture.rie.gouv.fr/ssp/bmis/packages/dbexplorer\",\n                     dependencies = T,\n                     git = \"external\")\n```\n\nComme n'importe quel autre package R, `{dbExplorer}` doit être chargé avec :\n\n\n```{.r}\nlibrary(dbExplorer)\n```\n\nAvant d'explorer ce package, **2 concepts théoriques sont nécessaires**.\n\n## Les \"Background jobs\" de RStudio\n\nLes \"Background Jobs\" dans RStudio sont une fonctionnalité qui permet **d’exécuter des scripts R en arrière-plan** sans bloquer l’interface principale de RStudio. \n\n![](img/Background_jobs.png){fig-align=\"center\"} <br>\n**Quelques caractéristiques** :  \n\n- **Une exécution indépendante** : le job s'exécute dans un processus séparé de la session principale (non bloquant).  \n- **Suivi de l'exécution** : une fenêtre dédiée dans RStudio qui permet de consulter la progression, les messages et l'état du job (traçabilité).\n- **Une reproductibilité garantie** : les jobs relancent le script tel qu'il est au moment de l'appel dans un environnement propre. Le job s'exécute de manière isolé sans polluer l'environnement global.\n\n## Exemple de Background jobs (1/3)\n\nSoit le script simple suivant :  \n\n```{.r}\nlibrary(dplyr)\n\nSys.sleep(5)\ntab_agregee <- iris |> \n  summarise(Moy_pet_long = mean(Petal.Length, na.rm = TRUE), .by = Species)\nSys.sleep(5)\n\nprint(\"Pgm terminé\")\n```\n<br>\n\nCe script peut être lancé via un background job en cliquant sur le bouton `\"Start Background job\"`.    \n\n## Exemple de Background jobs (2/3)\n\nLa fenêtre suivante s'affiche :  \n\n![](img/fenetre_background_jobs.png){fig-align=\"center\"}\n\n\n## Exemple de Background jobs (3/3)\n\nEn fonction des choix effectués au lancement du background job, les résultats seront (ou pas) disponibles dans l'environnement global de la session R.  \n\n![](img/Env_background_jobs.png){fig-align=\"center\"}\n\nSi vous avez choisi de stocker les résultats dans un objet \"results\", voici comment y accéder :  \n\n![](img/get_env_background_jobs.png){fig-align=\"center\"}\n\n## Structure d'une base de données relationnelles\n\nLes bases de données relationnelles sont structurées **de manière hiérarchique et logique**.  \n\n- **La Base de donnée (BDD)** : c'est l'entité principale qui contient l'ensemble des données\n- **Le schéma** : c'est une structure logique à l'intérieur d'une BDD. Il sert à organiser les objets. Il peut être vu comme un *dossier* dans la BDD\n- **Les tables** : ce sont les éléments centraux où les données sont stockées\n- **Les vues** : ce sont des représentations virtuelles de tables (créées au moment des requêtes)\n\nExemple de structure :  \n\n```\nBase de données : vente_en_ligne\n│\n├── Schéma : public\n│   ├── Table : clients\n│   ├── Table : commandes\n│   └── Table : produits\n│\n└── Schéma : archive\n    └── Table : commandes_2020\n```\n\n## Se connecter à une BDD sans dbExplorer (1/3)\n\nExemple avec BDD PostgreSQL :  \n\n```{.r}\nlibrary(connections)\nlibrary(RPostgres)\n\n### Chargement des infos de connection\ninfos_connection_prod <- read_delim(\"infos_connection.csv\", \n                                    delim = \";\", escape_double = FALSE, trim_ws = TRUE,\n                                    show_col_types = FALSE) %>% \n  filter(ENV == \"PROD\")\n\n### Connexion à la BDD\ncon <- connection_open(\n    Postgres(), \n    user = infos_connection_prod[[\"USER\"]],\n    password = rawToChar(openssl::base64_decode(infos_connection_prod[[\"PWD\"]])),\n    host = infos_connection_prod[[\"DB_URL\"]], \n    dbname = infos_connection_prod[[\"DATABASE\"]],\n    port = infos_connection_prod[[\"PORT\"]])\n```\n\n\n\n## Se connecter à une BDD sans dbExplorer (2/3)\n\n=> La structure de la BDD est visible dans l'onglet `\"Connections\"` de RStudio :  \n\n![](img/balsaV2.png){fig-align=\"center\"}\n\n## Se connecter à une BDD sans dbExplorer (3/3)\n\n![](img/balsaV2_onglet_connections.png){fig-align=\"center\"}\n<br>\n![](img/balsaV2_affichage_table.png){fig-align=\"center\"}\n\n\n## Explorer une base de données PostgreSQL (1/4)\n\n```{.r}\n## Installation du package \nremotes::install_git(\"https://gitlab.forge.agriculture.rie.gouv.fr/ssp/bmis/packages/dbexplorer\",\n                     dependencies = T,\n                     git = \"external\")\n```\n\n```{.r}\n## Création du fichier de connexion à postgre SQL \nconnector_file <- \"./R/dbExplorer-connector/dbExplorerPgConnector.R\"\ndbExplorer:::createPostgreSQLConnector(host = \"postgresql-164525.projet-sortie-sas\",\n                                       dbname = \"dvf\",\n                                       port = 5432,\n                                       file=connector_file)\n```\n\n<br>\n\n```{.r}\n## Lancement de l'application sur ce fichier de connexion. \nExplorerDonnees(connectorFile = connector_file)\n```\n\n<br>\n\n=> **Un \"background job\"** se lance dans RStudio et **une application shiny** s'ouvre dans le navigateur.\n\n## Explorer une base de données PostgreSQL (2/4)\n\nEntrer le login & mot de passe d'accès à la BDD :  \n\n![](img/identification_dbExplorer.png){fig-align=\"center\"}\n\n## Explorer une base de données PostgreSQL (3/4)\n\nOn peut aussi supprimer la fenêtre de login en modifiant le fichier `dbExplorerPgConnector.R`.   \n\n<br>\n\n![](img/no_login.png){fig-align=\"center\"}\n\n## Explorer une base de données PostgreSQL (4/4)\n\n![](img/image_explorateur_bdd.png){fig-align=\"center\"}\n\n## Démonstration \n\n<br>\n<br>\n<br>\n<br>\n\nDémo sur Cerise ! (voir rép. `dbExplorer_test`)\n\n## Quelques raccourcis/astuces utiles !\n\n- Maintenir la touche \"Ctrl\" enfoncée pour **sélectionner les colonnes interactivement**  \n- Pour filtrer les lignes, cocher la case \"Cliquer pour filtrer\" puis :  \n    - Cliquer une fois pour appliquer le filtre sur les lignes de la table\n    - Cliquer deux fois pour appliquer la négation du filtre sur les lignes de la table\n- **Pour télécharger les jeux de données** au format csv, cliquer en haut à droite sur le bouton **\"télécharger\"** ou faire **Ctrl + S**.\n- Appuyer sur le bouton \"+\" pour travailler sur différents onglets (pour différentes tables).\n\n## Création de fichiers parquet à partir d'une BDD (1/2)\n\n```{.r}\n### Connexion à la BDD\ncon <- connection_open(\n    Postgres(), \n    user = infos_connection_prod[[\"USER\"]],\n    password = rawToChar(openssl::base64_decode(infos_connection_prod[[\"PWD\"]])),\n    host = infos_connection_prod[[\"DB_URL\"]], \n    dbname = infos_connection_prod[[\"DATABASE\"]],\n    port = infos_connection_prod[[\"PORT\"]])\n```\n\nAppel de la fonction `exportPgToParquet.R` :  \n\n```{.r}\nsource(\"R/exportPgToParquet.R\")\n```\n\n## Création de fichiers parquet à partir d'une BDD (2/2)\n\n```{.r}\n# Export de la table categorie_juridique\nexportPgToParquet(con,\"categorie_juridique\")\n# Export de la table entite_surface\nexportPgToParquet(con,\"entite_surface\")\n```\n<br>\n\n![](img/export_parquet.png){fig-align=\"center\"}\n<br>\n![](img/export_parquet_explorateur.png){fig-align=\"center\"}\n\n## Explorer une base de données SQLite\n\n```{.r}\nlibrary(RSQLite)\nconnector_file <- \"R/dbExplorer-connector/connector_sqlite.R\"\ndbExplorer::ExplorerDonnees(connectorFile = \"R/dbExplorer-connector/connector_sqlite.R\")\n```\n<br>\n\n![](img/explorateur_sqlite.png){fig-align=\"center\"}\n\n## Explorer des fichiers parquets\n\n```{.r}\ndbExplorer::ExplorerDossiers(\"~/CERISE/03-Espace-de-Diffusion/030_Structures_exploitations/3020_Recensements/RA_2010/\")\n```\n\n![](img/explorateur_dossier.png){fig-align=\"center\"}\n\n## Quelques compléments sur les manipulations de BDD avec R (1/2)\n\nPrenons une base SQLite :\n\n- Connexion à la BDD\n```{.r}\nlibrary(RSQLite)\n\nchemin_IPPAP_dev <- \"~/CERISE/02-Espace-de-Production/090_Prix/9010_IPPAP/IPPAP_app/dev/App/donnees/IPPAP.sqlite\"\ndb_IPPAP <- dbConnect(RSQLite::SQLite(), dbname = chemin_IPPAP_dev)\n```\n\n<br>\n\nQuelques manipulations possibles avec des fonctions R :  \n\n- Pour afficher la liste des tables de la base de donnees\n\n```{.r}\ndbListTables(db_IPPAP)\n\n> [1] \"COEFF_RACCORDEMENT\"   \"DATES\"                \"NOMENCLATURE_BDC\"    \n[4] \"POND_MOIS_COMPOSANTS\" \"PRIX\"                 \"QUANTITES\"           \n[7] \"REFERENTIEL_IPPAP\"    \"VIVANTES\"  \n```\n\n## Quelques compléments sur les manipulations de BDD avec R (2/2)\n\n- Pour afficher les colonnes d'une table\n\n```{.r}\ndbListFields(db_IPPAP,\"PRIX\")\n> [1] \"CODE_S\"     \"2019-01-01\" \"2019-02-01\" \"2019-03-01\" \"2019-04-01\" \"2019-05-01\"\n  [7] \"2019-06-01\" \"2019-07-01\" \"2019-08-01\" \"2019-09-01\" \"2019-10-01\" \"2019-11-01\"\n [13] \"2019-12-01\" \"2020-01-01\" \"2020-02-01\" \"2020-03-01\" \"2020-04-01\" \"2020-05-01\"\n [19] \"2020-06-01\" \"2020-07-01\" \"2020-08-01\" \"2020-09-01\" \"2020-10-01\" \"2020-11-01\"\n ...\n```\n\n- Pour lire une table \n\n```{.r}\nverif_PRIX <- dbReadTable(db_IPPAP,\"PRIX\")\nhead(verif_PRIX)[,1:4]\n    CODE_S  2019.01.01  2019.02.01  2019.03.01  2019.04.01\n1 10100046       1.839       1.794       1.700       1.729\n2  1120057          NA          NA       0.606       0.516\n3  1140001          NA          NA          NA          NA\n4  1150001          NA          NA          NA          NA\n```\n\n\n## Utilisation basique du package {dm}\n\n\nInstallation et chargement :  \n\n```{.r}\ninstall.packages('dm')\nlibrary(dm)\n```\n\nCréation d'un objet dm :\n\n```{.r}\nfin_dm <- dm_from_src(db_IPPAP)\nfin_dm\n```\n\n```{.r}\n── Table source ───────────────────────────────────────────────────────────────────────────\nsrc:  sqlite 3.47.1 [/var/data/nfs/CERISE/02-Espace-de-Production/090_Prix/9010_IPPAP/IPPAP_app/dev/App/donnees/IPPAP.sqlite]\n── Metadata ───────────────────────────────────────────────────────────────────────────────\nTables: `COEFF_RACCORDEMENT`, `DATES`, `NOMENCLATURE_BDC`, `POND_MOIS_COMPOSANTS`, `PRIX`, … (8 total)\nColumns: 511\nPrimary keys: 0\nForeign keys: 0\n```\n\n## Aperçu de quelques fonctions de {dm} (1/2)\n\n- Pour afficher la liste des tables de la base de donnees\n\n```{.r}\nnames(fin_dm)\n\n> [1] \"COEFF_RACCORDEMENT\"   \"DATES\"                \"NOMENCLATURE_BDC\"    \n[4] \"POND_MOIS_COMPOSANTS\" \"PRIX\"                 \"QUANTITES\"           \n[7] \"REFERENTIEL_IPPAP\"    \"VIVANTES\"  \n```\n- Pour lire une table\n\n```{.r}\nfin_dm$PRIX\n# Source:   table<`PRIX`> [?? x 121]\n# Database: sqlite 3.47.1 [/var/data/nfs/CERISE/02-Espace-de-Production/090_Prix/9010_IPPAP/IPPAP_app/dev/App/donnees/IPPAP.sqlite]\n   CODE_S   `2019-01-01` `2019-02-01` `2019-03-01` `2019-04-01` `2019-05-01` `2019-06-01` `2019-07-01` `2019-08-01`\n   <chr>           <dbl>        <dbl>        <dbl>        <dbl>        <dbl>        <dbl>        <dbl>        <dbl>\n 1 10100046        1.84         1.79         1.7          1.73         1.75        NA           NA           NA    \n 2 1120057        NA           NA            0.606        0.516        0.504        0.531        0.75         0.657\n 3 1140001        NA           NA           NA           NA            0.162        0.295        0.208        0.203\n```\n\n\n## Aperçu de quelques fonctions de {dm} (2/2)\n\n- Pour afficher les colonnes d'une table\n```{.r}\ncolnames(fin_dm$PRIX)\n> [1] \"CODE_S\"     \"2019-01-01\" \"2019-02-01\" \"2019-03-01\" \"2019-04-01\" \"2019-05-01\"\n  [7] \"2019-06-01\" \"2019-07-01\" \"2019-08-01\" \"2019-09-01\" \"2019-10-01\" \"2019-11-01\"\n [13] \"2019-12-01\" \"2020-01-01\" \"2020-02-01\" \"2020-03-01\" \"2020-04-01\" \"2020-05-01\"\n [19] \"2020-06-01\" \"2020-07-01\" \"2020-08-01\" \"2020-09-01\" \"2020-10-01\" \"2020-11-01\"\n ...\n```\n\n- Pour faire des comptages sur une table\n```{.r}\ndplyr::count(fin_dm$REFERENTIEL_IPPAP,LIB_PRODUIT)\n# Source:   SQL [?? x 2]\n# Database: sqlite 3.47.1 [/var/data/nfs/CERISE/02-Espace-de-Production/090_Prix/9010_IPPAP/IPPAP_app/dev/App/donnees/IPPAP.sqlite]\n   LIB_PRODUIT             n\n   <chr>               <int>\n 1 Abricot                12\n 2 Ail                     1\n 3 Artichaut               7\n# ℹ more rows\n# ℹ Use `print(n = ...)` to see more rows\n```\n\n## Visualiser les relations entre les tables avec {dm}\n\nExemple issu de la documentation avec `dm_draw()`...  \n\n```{.r}\ndm %>%\n  dm_draw()\n```\n\n... qui permet de visualiser les relations entre les tables :  \n\n![](img/Visualisation_data_model.png){fig-align=\"center\"}\n\n\nLe package {dm} est très riche ! D'autres fonctionnalités pourront être abordés lors d'un futur GUR !  \n\n\n## Pour en savoir plus\n\n- [Package dm](https://dm.cynkra.com/)\n- [Fiche utilitr](https://book.utilitr.org/03_Fiches_thematiques/Fiche_connexion_bdd.html) sur l'utilisation des bases de données avec R."},"formats":{"masa-default-revealjs":{"identifier":{"display-name":"RevealJS","target-format":"masa-default-revealjs","base-format":"revealjs","extension-name":"masa-default"},"execute":{"fig-width":10,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"paged","error":false,"eval":true,"cache":false,"freeze":false,"echo":false,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":true,"code-overflow":"scroll","code-link":false,"code-line-numbers":true,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":true,"self-contained-math":false,"format-resources":["img/com_interne/PageStandard_Masa.svg"],"shortcodes":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","html-math-method":{"method":"mathjax","url":"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.9/MathJax.js?config=TeX-AMS_HTML-full"},"slide-level":2,"to":"revealjs","filters":["C:\\Users\\damien.dotta\\DEMESIS\\GUR\\Presentations\\presentation_dbExplorer\\_extensions\\masa-default\\bg.lua","roughnotation","reveal-header"],"css":["css/masa-default.css","css/default.css","css/stylePerso.css"],"email-obfuscation":"javascript","embed-resources":true,"number-sections":true,"highlight-style":"atom-one","self-contained":true,"toc":true,"toc-depth":1,"output-file":"template.html"},"language":{"toc-title-document":"Table des matières","toc-title-website":"Sur cette page","related-formats-title":"Autres formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"La source","other-links-title":"Autres liens","code-links-title":"Liens de code","launch-dev-container-title":"Lancer le Dev Container","launch-binder-title":"Lancer le Binder","article-notebook-label":"Cahier d'articles","notebook-preview-download":"Télécharger le cahier","notebook-preview-download-src":"Télécharger le code source","notebook-preview-back":"Retour à l'article","manuscript-meca-bundle":"Archive MECA","section-title-abstract":"Résumé","section-title-appendices":"Annexes","section-title-footnotes":"Notes de bas de page","section-title-references":"Les références","section-title-reuse":"Réutilisation","section-title-copyright":"Droits d'auteur","section-title-citation":"Citation","appendix-attribution-cite-as":"Veuillez citer ce travail comme suit :","appendix-attribution-bibtex":"BibTeX","appendix-view-license":"Voir la Licence","title-block-author-single":"Auteur·rice","title-block-author-plural":"Auteur·rice·s","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Date de publication","title-block-modified":"Modifié","title-block-keywords":"Mots clés","callout-tip-title":"Astuce","callout-note-title":"Note","callout-warning-title":"Avertissement","callout-important-title":"Important","callout-caution-title":"Mise en garde","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Montrer tout le code","code-tools-hide-all-code":"Cacher tout le code","code-tools-view-source":"Voir les sources","code-tools-source-code":"Code source","tools-share":"Share","tools-download":"Download","code-line":"Ligne","code-lines":"Lignes","copy-button-tooltip":"Copier vers le presse-papier","copy-button-tooltip-success":"Copié","repo-action-links-edit":"Modifier cette page","repo-action-links-source":"Voir la source","repo-action-links-issue":"Faire part d'un problème","back-to-top":"Retour au sommet","search-no-results-text":"Pas de résultats","search-matching-documents-text":"documents trouvés","search-copy-link-title":"Copier le lien vers la recherche","search-hide-matches-text":"Cacher les correspondances additionnelles","search-more-match-text":"correspondance de plus dans ce document","search-more-matches-text":"correspondances de plus dans ce document","search-clear-button-title":"Effacer","search-text-placeholder":"","search-detached-cancel-button-title":"Annuler","search-submit-button-title":"Envoyer","search-label":"Recherche","toggle-section":"Basculer la section","toggle-sidebar":"Basculer la barre latérale","toggle-dark-mode":"Basculer le mode sombre","toggle-reader-mode":"Basculer en mode lecteur","toggle-navigation":"Basculer la navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Théorème","crossref-lem-title":"Lemme","crossref-cor-title":"Corollaire","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Définition","crossref-exm-title":"Exemple","crossref-exr-title":"Exercice","crossref-ch-prefix":"Chapitre","crossref-apx-prefix":"Annexe","crossref-sec-prefix":"Section","crossref-eq-prefix":"Équation","crossref-lof-title":"Liste des Figures","crossref-lot-title":"Liste des Tables","crossref-lol-title":"Liste des Listings","environment-proof-title":"Preuve","environment-remark-title":"Remarque","environment-solution-title":"Solution","listing-page-order-by":"Trier par","listing-page-order-by-default":"Ordre par défaut","listing-page-order-by-date-asc":"Le plus ancien","listing-page-order-by-date-desc":"Le plus récent","listing-page-order-by-number-desc":"Descendant","listing-page-order-by-number-asc":"Ascendant","listing-page-field-date":"Date","listing-page-field-title":"Titre","listing-page-field-description":"Description","listing-page-field-author":"Auteur·rice","listing-page-field-filename":"Nom de fichier","listing-page-field-filemodified":"Modifié","listing-page-field-subtitle":"Sous-titre","listing-page-field-readingtime":"Temps de lecture","listing-page-field-wordcount":"Compteur de Mots","listing-page-field-categories":"Catégories","listing-page-minutes-compact":"{0} min.","listing-page-category-all":"Tous","listing-page-no-matches":"Aucun article correspondant","listing-page-words":"{0} mots","listing-page-filter":"Filtre","draft":"Brouillon"},"metadata":{"lang":"fr","fig-responsive":false,"quarto-version":"1.6.42","auto-stretch":true,"sc-sb-title":true,"title-slide-attributes":{"data-background-image":"img/com_interne/PageStandard_Masa.svg","data-background-size":"contain","data-background-opacity":"1"},"revealjs-plugins":["pointer","confetti","verticator"],"header-includes":["<link rel=\"icon\" type=\"image/png\" sizes=\"32x32\" href=\"img/logos/png/logoMASAicone.ico\">\n"],"slideNumber":"c/t","progress":true,"controlsLayout":"bottom-right","backgroundTransition":"fade","navigationMode":"default","history":true,"transitionSpeed":"slow","number-depth":2,"code-summary":"Code","code-copy":true,"menu":{"side":"left","width":"wide","markers":true,"transitions":true},"width":1920,"height":1080,"theme":"css/Masa.scss","_quarto-vars":{"forge":{"interne":"gitlab","externe":"github"},"version":0.1,"organisation":"MASA","supportTechnique":"bmis.ssp.sg@agriculture.gouv.fr"},"title":"Le package dbExplorer","subtitle":"Un outil Shiny pour explorer les bases de données et les tables parquet","date":"today","date-format":"DD/MM/YYYY","author":"SSP/DEMESIS/BQIS/PAOS","description":"Présentation du package dbExplorer au GUR du 30 juin 2025\n","slide-tone":false,"chalkboard":false,"transition":"slide","fig-cap-location":"bottom","toc-title":"Sommaire","toc-float":true,"editor":{"render-on-save":true}}}},"projectFormats":["masa-default-revealjs"]}