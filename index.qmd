---
title: "Outils de debugging/débogage"
subtitle: "Un outil Shiny pour explorer les bases de données et les tables parquet"
date: today
date-format: "DD/MM/YYYY"
author: "SSP/DEMESIS/BQIS/PAOS"
description: |
  Présentation des fonctionnalités de debugging au GUR de 2025

slide-tone: false # for blind readers
chalkboard: false # press the B key to toggle chalkboard
transition: slide
fig-cap-location: bottom
self-contained: true

toc: true
toc-title: Sommaire
toc-depth: 1
toc-float: true

# multiplex: true
execute:
  echo: false
  warning: false
  cache: false
editor:
  render-on-save: true
---

## Sommaire

- Pourquoi faire du debugging/débogage ?
- Le print
- Astuce dans les chaine de traitements
- Le breakpoint / point d'arrêt
- Le browser
- Les fonctions debug() / debugonce()
- Le package boomer
- Les logs

## Pourquoi faire du debugging/débogage ?

<br>

Le débogage, ou debugging en anglais, est une étape cruciale dans le développement de tout programme informatique.  

Cette présentation vous présente quelques outils que vous avez déjà à disposition sous **votre RStudio sur Cerise** afin de vous aider à trouver par vous-même la source de vos bugs.

## Exemple de code

Soit la fonction suivante :  
  b

```{.r}
exemple1 <- function(indicateur) {

  if (indicateur == "Sepale") {
    resultat <- iris |> 
      select(Species,starts_with("Sepal")) |> 
      head(3)
  } else if (indicateur == "Petale") {
    resultat <- iris |> 
      select(Species,starts_with("Petal")) |> 
      head(3)
  }
  return(resultat)
    
}

```

## Des erreurs/bugs

```{.r}
## Tout est ok
exemple1("Petale")

> exemple1("Petale")
  Species Petal.Length Petal.Width
1  setosa          1.4         0.2
2  setosa          1.4         0.2
3  setosa          1.3         0.2

```

<br>
  
```{.r}
## Un bug
exemple1("petale")

> exemple1("petale")
Erreur dans exemple1("petale") : objet 'resultat' introuvable
```


## Les breakpoints (1/N)

Avant de lancer vos traitements, il peut être utile de définir des breakpoints ("point d'arrêt") sur une ligne de code.  
**Lorsque R atteint cette ligne pendant l'exécution, il met le script en pause.**  

[Pour cela, on peut cliquer dans la marge à gauche du numéro de ligne dans l'éditeur.]{.Terre_battue2}

=> **Cela permet d'avoir accès à l'environnement d'exécution**, ce qui signifie que vous pouvez voir les valeurs de toutes vos variables, exécuter des commandes dans la console comme si vous étiez à cet endroit précis du code, et **avancer pas à pas** pour observer comment les variables changent.

![](img/breakpoint.png){fig-align="center"}  

Les fonctions R qui contiennent un breakpoint ont un point rouge dans l'onglet Environnement de RStudio :  

![](img/breakpoint_fonction.png){fig-align="center"}  

## Les breakpoints (2/N)

En appuyant sur le bouton `source` de RStudio :  

::: columns
::: {.column width="50%"}
![](img/breakpoint_point1.png){fig-align="center"} 

![](img/breakpoint_steps.png){fig-align="center"} 

:::

::: {.column width="50%"}
[La flèche verte et le texte en surbrillance permettent d'identifier le bout de code en cours d'exécution]{.green}
<br>
<br>
<br>
<br>
<br>
<br>
Appuyer sur le bouton "Next" ou taper la lettre "n" dans la console de RStudio pour exécuter le script pas à pas.
:::
:::

## Les breakpoints (3/N)

En appuyant sur le bouton `Next` de RStudio :  

::: columns
::: {.column width="50%"}

![](img/breakpoint_point3.png){fig-align="center"}  

![](img/breakpoint_point4.png){fig-align="center"} 

:::

::: {.column width="50%"}
Les objets se mettent à jour dans l'onglet Environnement de RStudio.
<br>
<br>
<br>
<br>
<br>
<br>

La flèche verte se positionne à l'emplacement du code qui sera exécuté à l'étape suivante.
:::
:::

## Les breakpoints (4/N)

En appuyant sur le bouton `Next` de RStudio :  

::: columns
::: {.column width="50%"}

![](img/breakpoint_point6.png){fig-align="center"} 

![](img/breakpoint_point5.png){fig-align="center"} 
:::

::: {.column width="50%"}
Les objets se mettent à jour dans l'onglet Environnement de RStudio.
<br>
<br>
<br>
<br>
<br>
<br>

La flèche verte se positionne à l'emplacement du code qui sera exécuté à l'étape suivante.
:::
:::

## Les breakpoints (5/N)

**Avantage des breakpoints :**  
- Les breakpoints s'appliquent immédiatement et ne vous obligent pas à modifier votre code R.

![](img/breakpoint_circle.png){fig-align="center"}  
